// <auto-generated />
using System;
using BussinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BussinessObject.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231107052058_initDB")]
    partial class initDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BussinessObject.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("BussinessObject.Content", b =>
                {
                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("blogId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("userId", "blogId");

                    b.HasIndex("blogId");

                    b.ToTable("contents");
                });

            modelBuilder.Entity("BussinessObject.Meal", b =>
                {
                    b.Property<Guid>("menuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("foodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("menuId", "foodId");

                    b.HasIndex("foodId");

                    b.ToTable("meals");
                });

            modelBuilder.Entity("BussinessObject.Menu", b =>
                {
                    b.Property<Guid>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("categoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("menuDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("menuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("menuPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("menuPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("menuType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MenuId");

                    b.HasIndex("categoryId");

                    b.ToTable("menus");
                });

            modelBuilder.Entity("BussinessObject.Schedule", b =>
                {
                    b.Property<Guid>("menuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("dateScheduled")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("menuId", "userInfoId");

                    b.HasIndex("userInfoId");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("BussinessObject.Service", b =>
                {
                    b.Property<Guid>("serviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("descriptionService")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameService")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ratingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("serviceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("userInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("serviceId");

                    b.HasIndex("serviceTypeId");

                    b.ToTable("services");
                });

            modelBuilder.Entity("BussinessObject.ServiceType", b =>
                {
                    b.Property<Guid>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("nameServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("textServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("serviceTypes");
                });

            modelBuilder.Entity("BussinessObject.blog", b =>
                {
                    b.Property<Guid>("bolgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("blogContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("blogName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("blogPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ratingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("bolgId");

                    b.ToTable("blogs");
                });

            modelBuilder.Entity("BussinessObject.chatSection", b =>
                {
                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("messageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("userId", "messageId");

                    b.HasIndex("messageId");

                    b.ToTable("chatSection");
                });

            modelBuilder.Entity("BussinessObject.complement", b =>
                {
                    b.Property<Guid>("ratingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("blogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("serviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ratingId");

                    b.HasIndex("blogId")
                        .IsUnique();

                    b.HasIndex("serviceId")
                        .IsUnique();

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Complements");
                });

            modelBuilder.Entity("BussinessObject.favoriteFood", b =>
                {
                    b.Property<Guid>("foodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("foodId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("favoriteFoods");
                });

            modelBuilder.Entity("BussinessObject.feebackCategory", b =>
                {
                    b.Property<Guid>("feedbackCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("feedbackCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("feedbackCategoryId");

                    b.ToTable("feebackCategories");
                });

            modelBuilder.Entity("BussinessObject.feedback", b =>
                {
                    b.Property<Guid>("feedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("feebackCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("feedbackId");

                    b.HasIndex("feebackCategoryId");

                    b.HasIndex("userId");

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("BussinessObject.food", b =>
                {
                    b.Property<Guid>("foodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("categoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("foodCalorios")
                        .HasColumnType("int");

                    b.Property<string>("foodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("foodNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("foodNutrition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("foodPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("foodProcessingVideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("foodTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("foodtimeProcess")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("foodId");

                    b.HasIndex("categoryId");

                    b.ToTable("foods");
                });

            modelBuilder.Entity("BussinessObject.ingredient", b =>
                {
                    b.Property<Guid>("ingredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("categoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ingredientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ingredientPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ingredientId");

                    b.HasIndex("categoryId");

                    b.ToTable("ingredients");
                });

            modelBuilder.Entity("BussinessObject.message", b =>
                {
                    b.Property<Guid>("messageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("file")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("messageId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("BussinessObject.notification", b =>
                {
                    b.Property<Guid>("notificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notificationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("type")
                        .HasColumnType("int");

                    b.HasKey("notificationId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("BussinessObject.recipe", b =>
                {
                    b.Property<Guid>("ingredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("foodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ingredientId", "foodId");

                    b.HasIndex("foodId");

                    b.ToTable("recipes");
                });

            modelBuilder.Entity("BussinessObject.role", b =>
                {
                    b.Property<Guid>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("roleId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("BussinessObject.user", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("certificateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("certificateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("notificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("roleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("userId");

                    b.HasIndex("notificationId")
                        .IsUnique();

                    b.HasIndex("roleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BussinessObject.userBodyMax", b =>
                {
                    b.Property<Guid>("userInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("BMIPerson")
                        .HasColumnType("real");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("heght")
                        .HasColumnType("int");

                    b.Property<int>("maximum_calories")
                        .HasColumnType("int");

                    b.Property<int>("minimum_calories")
                        .HasColumnType("int");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("serviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("weight")
                        .HasColumnType("int");

                    b.HasKey("userInfoId");

                    b.HasIndex("serviceId")
                        .IsUnique();

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("userBodyMaxes");
                });

            modelBuilder.Entity("BussinessObject.Content", b =>
                {
                    b.HasOne("BussinessObject.blog", "blogs")
                        .WithMany("contents")
                        .HasForeignKey("blogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObject.user", "users")
                        .WithMany("contents")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("blogs");

                    b.Navigation("users");
                });

            modelBuilder.Entity("BussinessObject.Meal", b =>
                {
                    b.HasOne("BussinessObject.food", "foods")
                        .WithMany("meals")
                        .HasForeignKey("foodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObject.Menu", "Menus")
                        .WithMany("meals")
                        .HasForeignKey("menuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menus");

                    b.Navigation("foods");
                });

            modelBuilder.Entity("BussinessObject.Menu", b =>
                {
                    b.HasOne("BussinessObject.Category", "categorys")
                        .WithMany("menus")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("categorys");
                });

            modelBuilder.Entity("BussinessObject.Schedule", b =>
                {
                    b.HasOne("BussinessObject.Menu", "menus")
                        .WithMany("schedules")
                        .HasForeignKey("menuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObject.userBodyMax", "userBodyMaxs")
                        .WithMany("schedules")
                        .HasForeignKey("userInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("menus");

                    b.Navigation("userBodyMaxs");
                });

            modelBuilder.Entity("BussinessObject.Service", b =>
                {
                    b.HasOne("BussinessObject.ServiceType", "serviceTypes")
                        .WithMany("services")
                        .HasForeignKey("serviceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("serviceTypes");
                });

            modelBuilder.Entity("BussinessObject.chatSection", b =>
                {
                    b.HasOne("BussinessObject.message", "messages")
                        .WithMany("chatSections")
                        .HasForeignKey("messageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObject.user", "users")
                        .WithMany("chatSections")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("messages");

                    b.Navigation("users");
                });

            modelBuilder.Entity("BussinessObject.complement", b =>
                {
                    b.HasOne("BussinessObject.blog", "blogs")
                        .WithOne("complements")
                        .HasForeignKey("BussinessObject.complement", "blogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObject.Service", "services")
                        .WithOne("complements")
                        .HasForeignKey("BussinessObject.complement", "serviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObject.user", "users")
                        .WithOne("complements")
                        .HasForeignKey("BussinessObject.complement", "userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("blogs");

                    b.Navigation("services");

                    b.Navigation("users");
                });

            modelBuilder.Entity("BussinessObject.favoriteFood", b =>
                {
                    b.HasOne("BussinessObject.food", "foods")
                        .WithMany("favoriteFoods")
                        .HasForeignKey("foodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObject.user", "users")
                        .WithMany("favoriteFoods")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("foods");

                    b.Navigation("users");
                });

            modelBuilder.Entity("BussinessObject.feedback", b =>
                {
                    b.HasOne("BussinessObject.feebackCategory", "feebackCategorys")
                        .WithMany("feedbacks")
                        .HasForeignKey("feebackCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObject.user", "users")
                        .WithMany("feedbacks")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("feebackCategorys");

                    b.Navigation("users");
                });

            modelBuilder.Entity("BussinessObject.food", b =>
                {
                    b.HasOne("BussinessObject.Category", "categorys")
                        .WithMany("foods")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("categorys");
                });

            modelBuilder.Entity("BussinessObject.ingredient", b =>
                {
                    b.HasOne("BussinessObject.Category", "categorys")
                        .WithMany("ingredients")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("categorys");
                });

            modelBuilder.Entity("BussinessObject.recipe", b =>
                {
                    b.HasOne("BussinessObject.food", "foods")
                        .WithMany("recipes")
                        .HasForeignKey("foodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObject.ingredient", "ingredients")
                        .WithMany("recipes")
                        .HasForeignKey("ingredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("foods");

                    b.Navigation("ingredients");
                });

            modelBuilder.Entity("BussinessObject.user", b =>
                {
                    b.HasOne("BussinessObject.notification", "notifications")
                        .WithOne("users")
                        .HasForeignKey("BussinessObject.user", "notificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObject.role", "roles")
                        .WithMany("users")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("notifications");

                    b.Navigation("roles");
                });

            modelBuilder.Entity("BussinessObject.userBodyMax", b =>
                {
                    b.HasOne("BussinessObject.Service", "services")
                        .WithOne("userBodyMaxs")
                        .HasForeignKey("BussinessObject.userBodyMax", "serviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObject.user", "users")
                        .WithOne("userBodyMaxs")
                        .HasForeignKey("BussinessObject.userBodyMax", "userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("services");

                    b.Navigation("users");
                });

            modelBuilder.Entity("BussinessObject.Category", b =>
                {
                    b.Navigation("foods");

                    b.Navigation("ingredients");

                    b.Navigation("menus");
                });

            modelBuilder.Entity("BussinessObject.Menu", b =>
                {
                    b.Navigation("meals");

                    b.Navigation("schedules");
                });

            modelBuilder.Entity("BussinessObject.Service", b =>
                {
                    b.Navigation("complements")
                        .IsRequired();

                    b.Navigation("userBodyMaxs")
                        .IsRequired();
                });

            modelBuilder.Entity("BussinessObject.ServiceType", b =>
                {
                    b.Navigation("services");
                });

            modelBuilder.Entity("BussinessObject.blog", b =>
                {
                    b.Navigation("complements")
                        .IsRequired();

                    b.Navigation("contents");
                });

            modelBuilder.Entity("BussinessObject.feebackCategory", b =>
                {
                    b.Navigation("feedbacks");
                });

            modelBuilder.Entity("BussinessObject.food", b =>
                {
                    b.Navigation("favoriteFoods");

                    b.Navigation("meals");

                    b.Navigation("recipes");
                });

            modelBuilder.Entity("BussinessObject.ingredient", b =>
                {
                    b.Navigation("recipes");
                });

            modelBuilder.Entity("BussinessObject.message", b =>
                {
                    b.Navigation("chatSections");
                });

            modelBuilder.Entity("BussinessObject.notification", b =>
                {
                    b.Navigation("users")
                        .IsRequired();
                });

            modelBuilder.Entity("BussinessObject.role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("BussinessObject.user", b =>
                {
                    b.Navigation("chatSections");

                    b.Navigation("complements")
                        .IsRequired();

                    b.Navigation("contents");

                    b.Navigation("favoriteFoods");

                    b.Navigation("feedbacks");

                    b.Navigation("userBodyMaxs")
                        .IsRequired();
                });

            modelBuilder.Entity("BussinessObject.userBodyMax", b =>
                {
                    b.Navigation("schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
